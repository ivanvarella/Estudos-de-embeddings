#!/usr/bin/env python3
"""
Script de inicializa√ß√£o r√°pida para o notebook Se√ß√£o 5.1
Este script configura o ambiente e inicia o Jupyter Notebook automaticamente.
"""

import subprocess
import sys
import os
from pathlib import Path

def check_environment():
    """Verifica se o ambiente est√° configurado"""
    print("üîç Verificando ambiente...")
    
    # Verificar se o script de teste existe
    test_script = Path(__file__).parent / "test_environment.py"
    if not test_script.exists():
        print("‚ùå Script de teste n√£o encontrado")
        return False
    
    # Executar teste
    try:
        result = subprocess.run([sys.executable, str(test_script)], 
                              capture_output=True, text=True)
        if result.returncode == 0:
            print("‚úÖ Ambiente verificado com sucesso")
            return True
        else:
            print("‚ö†Ô∏è  Ambiente com problemas, mas continuando...")
            return True
    except Exception as e:
        print(f"‚ö†Ô∏è  Erro ao verificar ambiente: {e}")
        return True

def start_jupyter():
    """Inicia o Jupyter Notebook"""
    print("üöÄ Iniciando Jupyter Notebook...")
    
    notebook_path = Path(__file__).parent.parent / "Se√ß√£o5.1_Embeddings.ipynb"
    
    if not notebook_path.exists():
        print("‚ùå Notebook n√£o encontrado")
        return False
    
    try:
        # Iniciar Jupyter com o notebook espec√≠fico
        subprocess.run([
            "jupyter", "notebook", 
            str(notebook_path),
            "--no-browser",
            "--port=8888"
        ])
        return True
    except FileNotFoundError:
        print("‚ùå Jupyter Notebook n√£o encontrado")
        print("Instale com: pip install jupyter")
        return False
    except KeyboardInterrupt:
        print("\nüëã Jupyter Notebook encerrado")
        return True
    except Exception as e:
        print(f"‚ùå Erro ao iniciar Jupyter: {e}")
        return False

def show_instructions():
    """Mostra instru√ß√µes para o usu√°rio"""
    print("\n" + "=" * 60)
    print("üìö INSTRU√á√ïES PARA O NOTEBOOK")
    print("=" * 60)
    print("1. Execute as c√©lulas em ordem sequencial")
    print("2. Aguarde o carregamento dos modelos (pode demorar)")
    print("3. Para Elasticsearch: docker-compose up -d")
    print("4. Para OpenAI: configure sua chave no notebook")
    print("\nüéØ FUNCIONALIDADES PRINCIPAIS:")
    print("‚Ä¢ Embeddings: Word2Vec, BERT, Sentence-BERT, OpenAI")
    print("‚Ä¢ Clustering: K-Means, DBSCAN, HDBSCAN")
    print("‚Ä¢ Visualiza√ß√£o: PCA, t-SNE, UMAP")
    print("‚Ä¢ Busca sem√¢ntica: Elasticsearch")
    print("‚Ä¢ Classifica√ß√£o: Upload de textos personalizados")
    print("\nüí° DICAS:")
    print("‚Ä¢ Use Ctrl+C para interromper execu√ß√£o")
    print("‚Ä¢ Salve o notebook regularmente")
    print("‚Ä¢ Verifique os logs em caso de erro")
    print("=" * 60)

def main():
    """Fun√ß√£o principal"""
    print("üéì INICIANDO SE√á√ÉO 5.1 - EMBEDDINGS AVAN√áADOS")
    print("=" * 60)
    
    # Verificar ambiente
    if not check_environment():
        print("‚ùå Ambiente n√£o configurado. Execute setup_environment.py primeiro")
        return 1
    
    # Mostrar instru√ß√µes
    show_instructions()
    
    # Perguntar se quer continuar
    try:
        response = input("\n‚ñ∂Ô∏è  Iniciar Jupyter Notebook? (s/N): ").strip().lower()
        if response not in ['s', 'sim', 'y', 'yes']:
            print("üëã Opera√ß√£o cancelada")
            return 0
    except KeyboardInterrupt:
        print("\nüëã Opera√ß√£o cancelada")
        return 0
    
    # Iniciar Jupyter
    if start_jupyter():
        print("‚úÖ Jupyter Notebook iniciado com sucesso!")
        return 0
    else:
        print("‚ùå Falha ao iniciar Jupyter Notebook")
        return 1

if __name__ == "__main__":
    sys.exit(main())
